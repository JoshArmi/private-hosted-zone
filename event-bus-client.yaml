Parameters:
  CidrRange:
    Type: String
  ResolverRuleId:
    Type: String
  MasterAccountId:
    Type: String
  DNSVPCId:
    Type: String
  IpAddr:
    Type: String
  Subdomain:
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CidrRange
      EnableDnsHostnames: True
      EnableDnsSupport: True

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: {}

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: eu-west-1a
      VpcId: !Ref VPC
      CidrBlock: !Ref CidrRange

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref RouteTable
      SubnetId: !Ref Subnet

  InternetRoute:
    Type: AWS::EC2::Route
    Properties:
       RouteTableId: !Ref RouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId: !Ref InternetGateway

  RuleAssociation:
    Type: AWS::Route53Resolver::ResolverRuleAssociation
    Properties:
      ResolverRuleId: !Ref ResolverRuleId
      VPCId: !Ref VPC

  Association:
    DependsOn: EventRule
    Type: Custom::VPCAuthorization
    Properties:
      ServiceToken: !GetAtt AssociationFunction.Arn
      HostedZoneId: !Ref HostedZone

  HostedZoneEvent:
    DependsOn: EventRule
    Type: Custom::HostedZoneEvent
    Properties:
      ServiceToken: !GetAtt HostedZoneFunction.Arn
      HostedZoneId: !Ref HostedZone

  HostedZone:
    Type: "AWS::Route53::HostedZone"
    Properties:
      Name: !Join 
        - "."
        - - !Ref Subdomain
          - cloud.private
      VPCs:
        - VPCId: !Ref VPC
          VPCRegion: !Sub ${AWS::Region}

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "events:PutEvents"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: "/"

  AssociationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          import cfnresponse

          def handler(event, context):
            try:
              print(event)
              vpc_id = os.environ['VPCID']
              region = os.environ['REGION']
              hosted_zone_id = event['ResourceProperties']['HostedZoneId']
              request_type = event['RequestType']
              route53 = boto3.Session().client('route53')
              route53.create_vpc_association_authorization(
                  HostedZoneId=hosted_zone_id,
                  VPC={
                      'VPCRegion': region,
                      'VPCId': vpc_id
                  }
              )
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, f'{hosted_zone_id}-association')
            except Exception as err:
              print(err)
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, f'{hosted_zone_id}-association')
      Environment:
        Variables:
          VPCID: !Ref DNSVPCId
          REGION: !Sub ${AWS::Region}
      Handler: index.handler
      Role: !GetAtt AssociationLambdaRole.Arn
      Runtime: python3.7

  AssociationLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "route53:CreateVPCAssociationAuthorization"
                Resource: "*"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Path: "/"

  HostedZoneFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def handler(event, context):
            hosted_zone_id = event['ResourceProperties']['HostedZoneId']
            request_type = event['RequestType']
            try:
              if request_type != 'Delete':
                events = boto3.Session().client('events')
                result = events.put_events(
                  Entries=[
                    {
                      'Source': 'josharmi.hostedzoneevent',
                      'Detail': f'{{"HostedZoneId":"{hosted_zone_id}"}}',
                      'DetailType': 'HostedZoneCreated'
                    }
                  ]
                )
                print(result)
                if result['FailedEntryCount'] > 0:
                  raise "Event failed to be sent"
              cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, f'{hosted_zone_id}-event')
            except Exception as err:
              print(err)
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, f'{hosted_zone_id}-event')
      Handler: index.handler
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.7

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - josharmi.hostedzoneevent
      State: ENABLED
      Targets:
        - Arn: !Join
            - ""
            - - "arn:aws:events:eu-west-1:"
              - !Ref MasterAccountId
              - ":event-bus/default"
          Id: MasterDefaultBus
          RoleArn: !GetAtt EventRuleRole.Arn

  EventRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "events.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "events:PutEvents"
                Resource: !Join
                  - ""
                  - - "arn:aws:events:eu-west-1:"
                    - !Ref MasterAccountId
                    - ":event-bus/default"
      Path: "/"

  RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Join
        - "."
        - - test
          - !Ref Subdomain
          - cloud.private
      Type: A
      HostedZoneId: !Ref HostedZone
      ResourceRecords:
        - !Ref IpAddr
      TTL: '300'
